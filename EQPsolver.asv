function [x, lambda] = EQPsolver(H, g, A, b, type)
    [~,n] = size(H);
    if strcmp(type, 'LDLdense')
        [K, d] = constructKKTSystem(H,g,A,b);
        [L,D,p] = ldl(K,'vector');
        solution(p) = L'\(D\(L\d(p)));
        x = solution(1:n)';
        lambda = solution(n+1:end)';
    end

     if strcmp(type, 'LDLsparse')
        [K, d] = constructKKTSystem(H, g, A, b);
        [L,D,p] = ldl(K,'vector');
        solution(p) = L'\(D\(L\d(p)));
        x = solution(1:n)';
        lambda = solution(n+1:end)';
    end
     
    if strcmp(type, 'LUdense')
        [K, d] = constructKKTSystem(H, g, A, b);
        [L, U, p] = lu(K, 'vector'); 
        solution(p) = U\(L\( d(p)));
        x = solution(1:n)';
        lambda = solution(n+1:end)';
    end 

     if strcmp(type, 'LUsparse')
        [K, d] = sparseConstructKKTSystem(H, g, A, b);
        [L, U, p] = lu(K, 'vector'); 
        solution(p) = U\(L\( d(p)));
        x = solution(1:n)';
        lambda = solution(n+1:end)';
     end 

    if strcmp(type, "RangeSpace")
        R=chol(H);
        mu=R'\g ;
        Hg=R\mu;
        mu=R'\A';
        HA=R\mu;   
        lambda = (A*HA) \(b+A*Hg) ;
        x = HA*lambda-Hg;
    end

    if strcmp(type, "NullSpace")
        [~,m] = size(A);
        [Q,R] = qr(A, 'vector') ;
        range = Q( : , 1 :m) ;
        null = Q( : ,m+1:n) ;
        Y = (R'\b) ;
        Qnt = null';
        pre = Qnt*H*null ;
        L = chol ( pre ) ;
        mu=L'\(-Qnt*(H*range*Y+g) ) ;
        Z=L\mu;
        x = range*Y+null*Z;
        lambda = R\Qrange'*( g+H*x);
    end

end
